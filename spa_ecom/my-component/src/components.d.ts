/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyApp {
    }
    interface MyButton {
        "onClick": ()=>void;
    }
    interface MyCard {
    }
    interface MyCategories {
    }
    interface MyContainer {
    }
    interface MyDelivery {
    }
    interface MyDetails {
    }
    interface MyFooter {
    }
    interface MyHeader {
    }
    interface MyHomepage {
    }
    interface MyInput {
        "name": string;
    }
    interface MyLayout {
    }
    interface MyLikecomponent {
        "size": string;
    }
    interface MyNav {
    }
    interface MyNavigation {
    }
    interface MyNavlink {
        "history": RouterHistory;
        "url": string;
    }
    interface MySearchbar {
    }
    interface MyStarrating {
        "totalStars": number;
    }
}
export interface MyStarratingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyStarratingElement;
}
declare global {
    interface HTMLMyAppElement extends Components.MyApp, HTMLStencilElement {
    }
    var HTMLMyAppElement: {
        prototype: HTMLMyAppElement;
        new (): HTMLMyAppElement;
    };
    interface HTMLMyButtonElement extends Components.MyButton, HTMLStencilElement {
    }
    var HTMLMyButtonElement: {
        prototype: HTMLMyButtonElement;
        new (): HTMLMyButtonElement;
    };
    interface HTMLMyCardElement extends Components.MyCard, HTMLStencilElement {
    }
    var HTMLMyCardElement: {
        prototype: HTMLMyCardElement;
        new (): HTMLMyCardElement;
    };
    interface HTMLMyCategoriesElement extends Components.MyCategories, HTMLStencilElement {
    }
    var HTMLMyCategoriesElement: {
        prototype: HTMLMyCategoriesElement;
        new (): HTMLMyCategoriesElement;
    };
    interface HTMLMyContainerElement extends Components.MyContainer, HTMLStencilElement {
    }
    var HTMLMyContainerElement: {
        prototype: HTMLMyContainerElement;
        new (): HTMLMyContainerElement;
    };
    interface HTMLMyDeliveryElement extends Components.MyDelivery, HTMLStencilElement {
    }
    var HTMLMyDeliveryElement: {
        prototype: HTMLMyDeliveryElement;
        new (): HTMLMyDeliveryElement;
    };
    interface HTMLMyDetailsElement extends Components.MyDetails, HTMLStencilElement {
    }
    var HTMLMyDetailsElement: {
        prototype: HTMLMyDetailsElement;
        new (): HTMLMyDetailsElement;
    };
    interface HTMLMyFooterElement extends Components.MyFooter, HTMLStencilElement {
    }
    var HTMLMyFooterElement: {
        prototype: HTMLMyFooterElement;
        new (): HTMLMyFooterElement;
    };
    interface HTMLMyHeaderElement extends Components.MyHeader, HTMLStencilElement {
    }
    var HTMLMyHeaderElement: {
        prototype: HTMLMyHeaderElement;
        new (): HTMLMyHeaderElement;
    };
    interface HTMLMyHomepageElement extends Components.MyHomepage, HTMLStencilElement {
    }
    var HTMLMyHomepageElement: {
        prototype: HTMLMyHomepageElement;
        new (): HTMLMyHomepageElement;
    };
    interface HTMLMyInputElement extends Components.MyInput, HTMLStencilElement {
    }
    var HTMLMyInputElement: {
        prototype: HTMLMyInputElement;
        new (): HTMLMyInputElement;
    };
    interface HTMLMyLayoutElement extends Components.MyLayout, HTMLStencilElement {
    }
    var HTMLMyLayoutElement: {
        prototype: HTMLMyLayoutElement;
        new (): HTMLMyLayoutElement;
    };
    interface HTMLMyLikecomponentElement extends Components.MyLikecomponent, HTMLStencilElement {
    }
    var HTMLMyLikecomponentElement: {
        prototype: HTMLMyLikecomponentElement;
        new (): HTMLMyLikecomponentElement;
    };
    interface HTMLMyNavElement extends Components.MyNav, HTMLStencilElement {
    }
    var HTMLMyNavElement: {
        prototype: HTMLMyNavElement;
        new (): HTMLMyNavElement;
    };
    interface HTMLMyNavigationElement extends Components.MyNavigation, HTMLStencilElement {
    }
    var HTMLMyNavigationElement: {
        prototype: HTMLMyNavigationElement;
        new (): HTMLMyNavigationElement;
    };
    interface HTMLMyNavlinkElement extends Components.MyNavlink, HTMLStencilElement {
    }
    var HTMLMyNavlinkElement: {
        prototype: HTMLMyNavlinkElement;
        new (): HTMLMyNavlinkElement;
    };
    interface HTMLMySearchbarElement extends Components.MySearchbar, HTMLStencilElement {
    }
    var HTMLMySearchbarElement: {
        prototype: HTMLMySearchbarElement;
        new (): HTMLMySearchbarElement;
    };
    interface HTMLMyStarratingElementEventMap {
        "ratingChanged": any;
    }
    interface HTMLMyStarratingElement extends Components.MyStarrating, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyStarratingElementEventMap>(type: K, listener: (this: HTMLMyStarratingElement, ev: MyStarratingCustomEvent<HTMLMyStarratingElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyStarratingElementEventMap>(type: K, listener: (this: HTMLMyStarratingElement, ev: MyStarratingCustomEvent<HTMLMyStarratingElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyStarratingElement: {
        prototype: HTMLMyStarratingElement;
        new (): HTMLMyStarratingElement;
    };
    interface HTMLElementTagNameMap {
        "my-app": HTMLMyAppElement;
        "my-button": HTMLMyButtonElement;
        "my-card": HTMLMyCardElement;
        "my-categories": HTMLMyCategoriesElement;
        "my-container": HTMLMyContainerElement;
        "my-delivery": HTMLMyDeliveryElement;
        "my-details": HTMLMyDetailsElement;
        "my-footer": HTMLMyFooterElement;
        "my-header": HTMLMyHeaderElement;
        "my-homepage": HTMLMyHomepageElement;
        "my-input": HTMLMyInputElement;
        "my-layout": HTMLMyLayoutElement;
        "my-likecomponent": HTMLMyLikecomponentElement;
        "my-nav": HTMLMyNavElement;
        "my-navigation": HTMLMyNavigationElement;
        "my-navlink": HTMLMyNavlinkElement;
        "my-searchbar": HTMLMySearchbarElement;
        "my-starrating": HTMLMyStarratingElement;
    }
}
declare namespace LocalJSX {
    interface MyApp {
    }
    interface MyButton {
        "onClick"?: ()=>void;
    }
    interface MyCard {
    }
    interface MyCategories {
    }
    interface MyContainer {
    }
    interface MyDelivery {
    }
    interface MyDetails {
    }
    interface MyFooter {
    }
    interface MyHeader {
    }
    interface MyHomepage {
    }
    interface MyInput {
        "name"?: string;
    }
    interface MyLayout {
    }
    interface MyLikecomponent {
        "size"?: string;
    }
    interface MyNav {
    }
    interface MyNavigation {
    }
    interface MyNavlink {
        "history"?: RouterHistory;
        "url"?: string;
    }
    interface MySearchbar {
    }
    interface MyStarrating {
        "onRatingChanged"?: (event: MyStarratingCustomEvent<any>) => void;
        "totalStars"?: number;
    }
    interface IntrinsicElements {
        "my-app": MyApp;
        "my-button": MyButton;
        "my-card": MyCard;
        "my-categories": MyCategories;
        "my-container": MyContainer;
        "my-delivery": MyDelivery;
        "my-details": MyDetails;
        "my-footer": MyFooter;
        "my-header": MyHeader;
        "my-homepage": MyHomepage;
        "my-input": MyInput;
        "my-layout": MyLayout;
        "my-likecomponent": MyLikecomponent;
        "my-nav": MyNav;
        "my-navigation": MyNavigation;
        "my-navlink": MyNavlink;
        "my-searchbar": MySearchbar;
        "my-starrating": MyStarrating;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-app": LocalJSX.MyApp & JSXBase.HTMLAttributes<HTMLMyAppElement>;
            "my-button": LocalJSX.MyButton & JSXBase.HTMLAttributes<HTMLMyButtonElement>;
            "my-card": LocalJSX.MyCard & JSXBase.HTMLAttributes<HTMLMyCardElement>;
            "my-categories": LocalJSX.MyCategories & JSXBase.HTMLAttributes<HTMLMyCategoriesElement>;
            "my-container": LocalJSX.MyContainer & JSXBase.HTMLAttributes<HTMLMyContainerElement>;
            "my-delivery": LocalJSX.MyDelivery & JSXBase.HTMLAttributes<HTMLMyDeliveryElement>;
            "my-details": LocalJSX.MyDetails & JSXBase.HTMLAttributes<HTMLMyDetailsElement>;
            "my-footer": LocalJSX.MyFooter & JSXBase.HTMLAttributes<HTMLMyFooterElement>;
            "my-header": LocalJSX.MyHeader & JSXBase.HTMLAttributes<HTMLMyHeaderElement>;
            "my-homepage": LocalJSX.MyHomepage & JSXBase.HTMLAttributes<HTMLMyHomepageElement>;
            "my-input": LocalJSX.MyInput & JSXBase.HTMLAttributes<HTMLMyInputElement>;
            "my-layout": LocalJSX.MyLayout & JSXBase.HTMLAttributes<HTMLMyLayoutElement>;
            "my-likecomponent": LocalJSX.MyLikecomponent & JSXBase.HTMLAttributes<HTMLMyLikecomponentElement>;
            "my-nav": LocalJSX.MyNav & JSXBase.HTMLAttributes<HTMLMyNavElement>;
            "my-navigation": LocalJSX.MyNavigation & JSXBase.HTMLAttributes<HTMLMyNavigationElement>;
            "my-navlink": LocalJSX.MyNavlink & JSXBase.HTMLAttributes<HTMLMyNavlinkElement>;
            "my-searchbar": LocalJSX.MySearchbar & JSXBase.HTMLAttributes<HTMLMySearchbarElement>;
            "my-starrating": LocalJSX.MyStarrating & JSXBase.HTMLAttributes<HTMLMyStarratingElement>;
        }
    }
}
